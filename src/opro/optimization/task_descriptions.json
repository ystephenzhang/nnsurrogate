{
  "1D_heat_transfer": {
    "cfl": "Your task is to find the coarsest grid resolution that achieves convergence in a 1D heat transfer simulation, subject to a specified cost budget. You must minimize the total cost incurred by function calls, but your primary goal is to successfully meet the convergence criteria. You should always use the tool call function to finish the problem.\n\nWorkflow:\nYou need to choose a reasonable value for cfl, the Courant-Friedrichs-Lewy condition which establishes a relationship between temporal and spatial discretization, to solve a given PDE problem.\nThe value of n_space is 100; You don't need to change it.\nYou have only one opportunity to choose a reasonable value for cfl.\nNo trial-and-error or iterative optimization is permitted.\nYour goal is to select a value that is likely to converge, while also keeping the cost from becoming too high.\nStep 1: You must make your best one-shot guess based solely on your domain knowledge.\nStep 2: Call the Convergence Test Function; check if the solution has converged.\nStep 3: Respond using the final response format and make no further function calls.",
    "n_space": "Your task is to find the coarsest grid resolution that achieves convergence in a 1D heat transfer simulation, subject to a specified cost budget. You must minimize the total cost incurred by function calls, but your primary goal is to successfully meet the convergence criteria. You should always use the tool call function to finish the problem.\n\nWorkflow:\nYou need to choose a reasonable value for n_space the number of spatial segments to solve a given PDE problem.\nThe value of cfl is 1.0; You don't need to change it.\nYou have only one opportunity to choose a reasonable value for n_space.\nNo trial-and-error or iterative optimization is permitted.\nYour goal is to select a value that is likely to converge, while also keeping the cost from becoming too high.\nStep 1: You must make your best one-shot guess based solely on your domain knowledge.\nStep 2: Call the Convergence Test Function; check if the solution has converged.\nStep 3: Respond using the final response format and make no further function calls."
  },
  "2D_heat_transfer": {
    "dx": "Your task is to find the optimal parameter, solving 2D steady-state heat transfer problems using the Jacobi iteration method with Successive Over-Relaxation (SOR). The simulation models a square plate with fixed boundary conditions: the top boundary is held at temperature 1.0, while all other boundaries are held at temperature 0.0. You should try to minimize the total cost incurred by function calls, but your primary goal is to successfully meet the convergence criteria. You should always use the tool call function to finish the problem.\nWorkflow:\nThe grid resolution determines the spatial discretization accuracy.\nA finer grid provides more accurate solutions but increases computational cost.\nThe convergence metric is the temperature distribution at the middle (vertical) line.\nThe value of relax is 1.0, T_init is 0.25, error_threshold is 1e-7. You must not change them!\nTHE ONLY CHANGABLE PARAMETER IS dx!\nYou have only one opportunity to choose an optimal value for dx, to find an optimal grid resolution.\nNo trial-and-error or iterative optimization is permitted.\nYour goal is to select a value that is likely to converge, while also keeping the cost from becoming too high.\nStep 1: You must make your best one-shot guess based solely on your domain knowledge.\nStep 2: Call the Convergence Test Function; check if the solution has converged.\nStep 3: Respond using the final response format and make no further function calls.",
    "relax": "Your task is to find the optimal parameter, solving 2D steady-state heat transfer problems using the Jacobi iteration method with Successive Over-Relaxation (SOR). The simulation models a square plate with fixed boundary conditions: the top boundary is held at temperature 1.0, while all other boundaries are held at temperature 0.0. You should try to minimize the total cost incurred by function calls, but your primary goal is to successfully meet the convergence criteria. You should always use the tool call function to finish the problem.\nWorkflow:\nThe relaxation factor affects convergence speed of the SOR method.\nNote for relax ratio (SOR), a bad choice may lead to NAN/INFITY solution or unable to converge after max number of iterations.\nThe value of dx is 0.005, T_init is 0.25, error_threshold is 1e-7. You must not change them!\nTHE ONLY CHANGABLE PARAMETER IS relax!\nYou have only one opportunity to choose an optimal value for relax.\nNo trial-and-error or iterative optimization is permitted.\nYour goal is to select a value that is likely to converge, while also keeping the cost from becoming too high.\nStep 1: You must make your best one-shot guess based solely on your domain knowledge.\nStep 2: Call the Convergence Test Function; check if the solution has converged.\nStep 3: Respond using the final response format and make no further function calls.",
    "error_threshold": "Your task is to find the optimal parameter, solving 2D steady-state heat transfer problems using the Jacobi iteration method with Successive Over-Relaxation (SOR). The simulation models a square plate with fixed boundary conditions: the top boundary is held at temperature 1.0, while all other boundaries are held at temperature 0.0. You should try to minimize the total cost incurred by function calls, but your primary goal is to successfully meet the convergence criteria. You should always use the tool call function to finish the problem.\nWorkflow:\nThe error threshold determines when to stop the Jacobi iteration process.\nThe convergence metric is the temperature distribution at the middle (vertical) line.\nThe value of dx is 0.005, relax is 1.0, T_init is 0.25. You must not change them!\nTHE ONLY CHANGABLE PARAMETER IS error_threshold!\nYou have only one opportunity to choose an optimal value for the error_threshold.\nNo trial-and-error or iterative optimization is permitted.\nYour goal is to select a value that is likely to converge, while also keeping the cost from becoming too high.\nStep 1: You must make your best one-shot guess based solely on your domain knowledge.\nStep 2: Call the Convergence Test Function; check if the solution has converged.\nStep 3: Respond using the final response format and make no further function calls.",
    "t_init": "Your task is to find the optimal parameter, solving 2D steady-state heat transfer problems using the Jacobi iteration method with Successive Over-Relaxation (SOR). The simulation models a square plate with fixed boundary conditions: the top boundary is held at temperature 1.0, while all other boundaries are held at temperature 0.0. You should try to minimize the total cost incurred by function calls, but your primary goal is to successfully meet the convergence criteria. You should always use the tool call function to finish the problem.\nWorkflow:\nThe initial temperature field can affect convergence speed.\nNote for t_init, a bad choice may lead to NAN/INFITY solution or unable to converge after max number of iterations.\nThe value of dx is 0.005, relax is 1.0, error_threshold is 1e-7. You must not change them!\nTHE ONLY CHANGABLE PARAMETER IS t_init!\nYou have only one opportunity to choose an optimal value for t_init.\nNo trial-and-error or iterative optimization is permitted.\nYour goal is to select a value that is likely to converge, while also keeping the cost from becoming too high.\nStep 1: You must make your best one-shot guess based solely on your domain knowledge.\nStep 2: Call the Convergence Test Function; check if the solution has converged.\nStep 3: Respond using the final response format and make no further function calls."
  },
  "1D_burgers": {
    "cfl": "Your task is to find the optimal parameter, solving the 1D inviscid Burgers equation, which serves as a simplified model for compressible gas dynamics, using a 2nd order Roe method with minmod limiter. You should try to minimize the total cost incurred by function calls, but your primary goal is to successfully meet the convergence criteria. You should always use the tool call function to finish the problem.\nWorkflow:\nCFL (Courant-Friedrichs-Lewy) number is defined as: $CFL = u_{max}\\,dt/dx$ where $u_{max}$ is the maximum |u| for Burgers.\nYou may **only** change `cfl`.\nThe value of k is **1**, w is **1.0**. **You must not change them!**\nYou have only one opportunity to choose an optimal value for cfl.\nNo trial-and-error or iterative optimization is permitted.\nYour goal is to select a value that is likely to converge, while also keeping the cost from becoming too high.\nStep 1: Make your best **one-shot** guess for cfl.\nStep 2: Call the Convergence Test Function and check if converged.\nStep 3: Output final answer with no further tool calls.",
    "k": "Your task is to find the optimal parameter, solving the 1D inviscid Burgers equation, which serves as a simplified model for compressible gas dynamics, using a 2nd order Roe method with minmod limiter. You should try to minimize the total cost incurred by function calls, but your primary goal is to successfully meet the convergence criteria. You should always use the tool call function to finish the problem.\nAnd the maximum number of your function calls is 10.\nWorkflow:\nThis is a *composite* search task.\nYou first pick **k** (diffusion coefficient) *once* and must never change it afterwards.\nThe parameter **w is fixed at 1.0** and must not be changed.\nAfter choosing k, you may only modify `cfl`.\nStep 1  Choose k based on domain knowledge (only one chance).\nStep 2  Choose an initial coarse cfl.\nStep 3  Call the convergence test function, and refine cfl based on the feedback from the simulation.\nStep 4  You may refine cfl at most 10 times.\nStep 5  If you think the experiment can be stopped, you must respond with the final response format and make no further function calls. If you reach the 10th refinement, you **must** still perform a convergence check immediately after that refinement; then, regardless of whether it is converged or not, respond with the final response format and make no further function calls.",
    "w": "Your task is to find the optimal parameter, solving the 1D inviscid Burgers equation, which serves as a simplified model for compressible gas dynamics, using a 2nd order Roe method with minmod limiter. You should try to minimize the total cost incurred by function calls, but your primary goal is to successfully meet the convergence criteria. You should always use the tool call function to finish the problem.\nWorkflow:\nThis is a *composite* search task.\nYou first pick **w** (slope-limiter parameter) *once* and must never change it afterwards.\nThe parameter **k is fixed at -1** and must not be changed.\nAfter choosing w, you may only modify `cfl`.\nYou have **one shot** to pick both *w* and *cfl*.\nThen call the Convergence Test Function and report the result."
  }
}